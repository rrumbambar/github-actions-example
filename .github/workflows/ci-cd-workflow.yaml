name: CI/CD Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pytest

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - uses: docker/login-action@v2 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      
    - name: Build and push image
      uses: docker/build-push-action@v5
      with:
        context: ./app 
        file: ./app/Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/github-actions-example:build-${{ github.run_number }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

  deploy: 
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    
    env:
      PROJECT_ID: ${{ secrets.GKE_PROJECT }}
      GKE_CLUSTER: autopilot-cluster-1
      GKE_REGION: us-central1

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v1
      with:
        kustomize-version: "3.6.1"

    - name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Install gke-gcloud-auth-plugin
      uses: "google-github-actions/setup-gcloud@v2"
      with:
        install_components: "gke-gcloud-auth-plugin"
    
    - name: Authenticate to GKE cluster
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: '${{ secrets.GKE_CLUSTER }}'
        location: '${{ secrets.GKE_REGION }}'

    - name: Create namespace & set in Kustomize
      run: |
         namespacePresentBlue=`kubectl get ns | grep hello-app-blue | wc -l`
         namespacePresentGreen=`kubectl get ns | grep hello-app-green | wc -l`
         if [ $namespacePresentBlue -eq 0 ]
         then
            kubectl create ns hello-app-blue
            cd k8s
            kustomize edit set namespace hello-app-blue
            echo "NEW_NAMESPACE=hello-app-blue" >> $GITHUB_ENV
            echo "OLD_NAMESPACE=hello-app-green" >> $GITHUB_ENV
         elif [ $namespacePresentGreen -eq 0 ]
         then
            kubectl create ns hello-app-green
            cd k8s
            kustomize edit set namespace hello-app-green
            echo "NEW_NAMESPACE=hello-app-green" >> $GITHUB_ENV
            echo "OLD_NAMESPACE=hello-app-blue" >> $GITHUB_ENV
         else
            echo "Both Blue and Green namespaces are present! Exiting"
            exit 1
         fi

    - name: Update Kubernetes resources
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      run: |
        cd k8s
        kustomize edit set image github-actions-example=$DOCKER_USERNAME/github-actions-example:$GITHUB_SHA
        cat kustomization.yaml

    - name: Deploy updated resources
      run: |
        kubectl apply -k ./k8s

    - name: Wait for rollout to complete
      run: |
        kubectl rollout status deployment/hello-deployment -n ${{ env.NEW_NAMESPACE }}

    - name: Send test request to new deployment
      run: |
        NEW_IP=$(kubectl get svc hello-deployment -n ${{ env.NEW_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        curl -f http://$NEW_IP/health || (echo "Health check failed" && exit 1)


    - name: Switch traffic to new deployment
      run: |
        kubectl patch ingress hello-app-ingress \
           -n ${{ env.NEW_NAMESPACE }} \
           -p '{"spec":{"rules":[{"http":{"paths":[{"path":"/","backend":{"service":{"name":"hello-service","port":{"number":80}}}}]}}]}}'

    - name: Commit updated Kubernetes files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add k8s/*.yaml
        git commit -m "Update resource files with new Docker tag 'build-${{ github.run_number }}'"
        
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }} 
